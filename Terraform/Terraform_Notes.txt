*** Terraform Notes ***

#Day 1:

0. Terraform is an infrastructure as code tool that lets you build, change, and version cloud and on-prem resources safely and efficiently.
1. HashiCorp Terraform is an infrastructure as code tool that lets you define both cloud and on-prem resources in human-readable configuration files that you can version, reuse, and share.
2. You can then use a consistent workflow to provision and manage all of your infrastructure throughout its lifecycle.
3. Terraform can manage low-level components like compute, storage, and networking resources, as well as high-level components like DNS entries and SaaS features.
4. Infrastructure as Code (IaC) tools allow you to manage infrastructure with configuration files rather than through a graphical user interface.
5. IaC allows you to build, change, and manage your infrastructure in a safe, consistent, and repeatable way by defining resource configurations that you can version, reuse, and share.
6. Terraform is HashiCorp's infrastructure as code tool. It lets you define resources and infrastructure in human-readable, declarative configuration files, and manages your infrastructure's lifecycle. 
7. Using Terraform has several advantages over manually managing your infrastructure:
    7.1 Terraform can manage infrastructure on multiple cloud platforms.
    7.2 The human-readable configuration language helps you write infrastructure code quickly.
    7.3 Terraform's state allows you to track resource changes throughout your deployments.
    7.4 You can commit your configurations to version control to safely collaborate on infrastructure.

8. Terraform wokrs: 
    8.1 Terraform creates and manages resources on cloud platforms and other services through their application programming interfaces (APIs). Providers enable Terraform to work with virtually any platform or service with an accessible API.

        Terraform <------> Terraform providers <------> Target API

9. The core Terraform workflow consists of three stages:
    9.1 Write: You define resources, which may be across multiple cloud providers and services. For example, you might create a configuration to deploy an application on virtual machines in a Virtual Private Cloud (VPC) network with security groups and a load balancer.
    9.2 Plan: Terraform creates an execution plan describing the infrastructure it will create, update, or destroy based on the existing infrastructure and your configuration.
    9.3 Apply: On approval, Terraform performs the proposed operations in the correct order, respecting any resource dependencies. For example, if you update the properties of a VPC and change the number of virtual machines in that VPC, Terraform will recreate the VPC before scaling the virtual machines.


        Write (Terraform Project- Terraform configuration   Terraform state file) (Define infrastructure in configuration files) ------------> Plan (Terminal) (Review the changes Terraform will make to your infrastructure) ----------------> Apply (AWS, AZURE, GCP.....ect) (Terraform provisions your infrastructure & update the state file)

10. Terraform takes an immutable approach to infrastructure, reducing the complexity of upgrading or modifying your services and infrastructure.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#Day 2:

1. Terrafrom commands: 
    1.1 Terraform init: This command to initialize the working directory that contains your code. It inti the terreform plugins/necessary modules in our working directory.
    1.2 Terraform plan: This command which will execute after the data from intialization. After intialization, read the code & then create & shows a "plan" of execution of the our deployment. 
                        It means that terraform plan will read the all the configuration which you have written down in the configuration.
                        Terraform plan doesn't deploy anything, it just shows what is going to deply.
                        At this stage, authentication credentials are used to connect to your infrastructure.
    1.3 Terraform apply: This command deploy the infrastructure & statements in the code in the cloud.
                        update the deployment state tracking i.e state files.
                        It used to create a new deployment from our configuration files and update the existing deployment as well.
                        If some resource are already deployed the this command will deploy updated code & tracking.
    1.4 Terraform destroy: This command looks at the recorded & store state files created during deployment & destroy resources found in state file.
                            Is should be used carefully, as this is non-reversible command. Take backup and make sure what you want to destroy.

        Write a code (IAC-HCL) ==============> Terraform init ==============> Terraform plan >>>>>>>>>>>>>>> Terraform apply --------------> Terraform destroy (not mandotory to do but remining all are nedded)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#Day3:

1. Terraform providers:
    1.1 providers are public cloud vendors, to which terraform interact to create resource.
    1.2 Terraform relies on plugins called "providers" to interact which cloud providers.
    1.3 Terraform configurations must declare which providers they require so that terraform can install and use them.
    1.4 Terrafrom providers release is separate from terraform release.
    1.5 We can write our own providers.
    1.6 Terraform finds & install providers as you initialize terraform (using terraform init command)
    1.7 As a best practice providers should be versioned in your terraform config files.
    1.8 Once execute the terraform init command some plugins/modules are installed mentioned below
        ./
        ../
        .terraform/ ------------> providers/registry.terraform.io/HashiCorp/ (plugins/modules) --------->aws/  azurem/ (providers)
        /terraform.loc.h
        main.tf
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#Day4:

1. We need to create the IAM user to the AWS console 
2. We need to create the security group and edit the inbounded rules to provide the all traffic------>custom----->IP Address we need to give the created machine one.
3. Connect the server machine and create the terraforn folder inside we need to create the new instance code (HCL) (Basic_Terraform_code/create_1st_instance.tf)
5. Write the required code in the createinstance.tf file and provide the access key but we can't provide the secret key in file directly because some will cut by using both the values so we can provide the secret key at the run time env.
6. comments to run:
    6.1 terraform init (Terraform initialize the plugins to the using providers/services)
    6.2 terraform plan (we can see the our configaration data before pply the changes was made by user)
    6.3 terraform apply (once we execute this command it will create the instance in the AWS conslone and going to see the running state)
    6.4 terraform destroy (Once we are done the deployment, if we are not using that instance the we can destroy the instance by using this command then it will terminate the instance perminatly and we cant undo the destory)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#Day5: 

1. we can't provide the multile secret key's at the configartion time, so then we need to create the another file name providers.tf then we need to mention every provider details in one place.
2. How we can supply the credentials by env variable to the terraform so we need to create the env variable like below.
    2.1 export AWS_ACCESS_KEY_ID="anaccesskey'
    2.2 export AWS_SECRET_ACCESS_KEY="ansecretkey"
    2.3 export AWS_DEFAULT_REGION="us-west-2"
3. The env variable got created or not we need to check while executing this command: "env | grep -i aws"
4. How we can create multule instance in the aws by using terraform
    4.1 create single name with all the multuple instances.
    4.2 create every instance with there unique names

        4.1.1 code block for single name with multiple instances:

                count = 3       

                tag = {
                    name = "multuple instance"
                }

        4.2.1 code block for unique name for every instances:

                count = 3       

                tag = {
                    name = "instance-${count.index}"            # here based on count and with index values
                }

5. Terraform State File:
    5.1 Terraform state file are important for resource tracking.
    5.2 Terraform state a way, that terraform read to identify what has been deployed.
    5.3 Very critical to terraform Functionality

        Terraform configaration (appServer <..>, appNetwork <..>, appDataBase <..>) -------------> Terraform State File (terraform.tfstate) ---------------->Managed Infrastructure (AWS EC2 Instance, AWS VPC, Azure DB)
    
    5.4 Stored in Flat File. By default named "terraform.tfstate".
    5.5 Stored in same working directory. But can be stored remotely.
    5.6 Helps terraform calcualte deployment deltas.
    5.7 Terraform Plan cab be used to create the New deployment plan.
    5.8 Never lose your Terraform State File. 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#Day6:

1. Variables in Terraform:
    1.1 Variables are necessary to parameterizing our deployments using Terraform.
    1.2 Input variables enable user to pass in configuration values at the time of deployment.
    1.3 using terraform Input variable is one way of deploying development, staging, or production environments using the same terraform resource decalarations with slightly different configaration.
    1.4 Define input variable: terraform input variable are defined using a variable blockthat define the variable name and other option parameters for the variable.
        these variable blocks can be place in any '.tf' filr within your terraform Project, but a common location used is within a filr named 'variable.tf'.
    1.5 definition of the input variable: the variable block is defined with the variable keyword followed by the name of the input variable.
        Also the required type property must be added to define the data type of the variable; such as string, number, object, or other supported data types.
    1.6 sample of varible decalarations in terraform:

            variable "environment" {
                type = string
            }

            variable "location" {
                type = string
                default = "eastus"
                description = "The Azure Region to deploy resources"
            }
    
    1.7 Input Variables Conditions: its supports version 0.13.0 above
        When defining input variable for a terraform Project, the input variable can have a custom validation rules defined.
        the custom validation rules for an input variable are defined by adding a validation block within the variable for the input variable.

        variable "location" {
            type = string
            description = "The azure Region to deploy resource"

            validation {
                Condition = contains(["eastus", "westus"], lower(var.location))
                error_message = "Unsupported azure region specified. supported regions include: eastus, westus"
            }
        }

    1.8 Input Variable Types -
        
        1.8.1 Primitive Types - Terraform supports three primitive types for Input Variables. string, number, bool
        1.8.2 Complex Types - Complex types allow you to group multiple values together into a single variable. Collection types, Structural types.
            
            1.8.2.1 Collection Types - A collection of multiple values grouped together as a single value.
                
                1.8.2.1.1 list(...) – A sequence of values identified by an index starting with zero.
                1.8.2.1.2 map(...) – A collection of values; each with a string label identifier.
                1.8.2.1.3 set(...) – A collection of unique values without any secondary identifiers or ordering.
            1.8.2.2 Structural Types - A collection of multiple values of several distinct types grouped together as a single value.
                
                1.8.2.2.1 object(...) – A collection of values each with their own type.
                1.8.2.2.2 tuple(...) – A sequence of values each with their own type.

    1.9 Use of variable inside the configaration file:

        1.9.1 Single Place Configuration is not a Good Idea.
        1.9.2 Use Variable to Manage the Secrets.
        1.9.3 No Need to push AWS creds in Git Repo
        1.9.4 User Variable for Dynamic Elements like AMI
        1.9.5 Variable Makes files flexible and env independent.

            createInstance.tf -

                provider "aws" {
                    access_key = "AKIASMSIZOF4QD2NTPB6"
                    secret_key = "SECRET_KEY_HERE"
                    region = "us-east-2"
                }
                resource "aws_instance" "MyFirstInstnace" {
                    count = 3
                    ami = "ami-05692172625678b4e"
                    instance_type = "t2.micro"

                tags = {
                    Name = "demoinstnce-${count.index}"
                    }
                }
        
            provider.tf -

                provider "aws" {
                    access_key = "AKIASMSIZOF4QD2NTPB6"
                    secret_key = "SECRET_KEY_HERE"
                    region = "us-east-2"
                }

            using the variables to access and this is the global syntex: 

                provider "aws" {
                    access_key = “${var.AWS_ACCESS_KEY}”
                    secret_key = “${var.AWS_SECRET_KEY}”
                    region = “${var.AWS_REGION}”
                }

            vars.tf or variable.tf-
            
                variable “AWS_ACCESS_KEY” {}
                variable “AWS_SECRET_KEY” {}
                variable “AWS_REGION” 
                {
                    default = “us-east-2”
                }

            terraform.tfvars (when commeting the code this file will not be commmited in the repository-

                AWS_ACCESS_KEY = “”
                AWS_SECRET_KEY = “”
                AWS_REGION = “”

            createInstance.tf -

                resource "aws_instance" "MyFirstInstnace" {
                    ami = "ami-05692172625678b4e"
                    instance_type = "t2.micro"
                }

    1.10 teraform.tfvar file will create the at run time and we will provide the our keys at same time.
    1.11 we can provide the keys at runtime for theree diffrent wayes:

        1.11.1 While run the terraform plan then it will ask the access_key and secret_key.
        1.11.2 While running the terraform plan command just we include "-var" 

                syntex: terraform plan -var AWS_ACCESS_KEY = "asdhagda" -var AWS_SECRET_KEY = "dydauh"
        
        1.11.3 While create the 'vi terraform.tfvar' its will create the file at run time and we will provide the access_key & secret_key
------------------------------------------------------------------------------------------------------------------------------------------------------------------------

            